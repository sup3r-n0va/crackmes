AUthor of solution : v4mp1r3
Crackme: cm1eng


HI to all this is a very simple crackme.

So Let's go:

open a shell ad go to disassemble it:
 
n3xuxn0 > objdump -d cm1eng

cm1eng:     file format elf32-i386

Disassembly of section .text:

08048080 <.text>:
 8048080:       b8 04 00 00 00          mov    $0x4,%eax
 8048085:       bb 01 00 00 00          mov    $0x1,%ebx
 804808a:       b9 f8 90 04 08          mov    $0x80490f8,%ecx
 804808f:       ba 0d 00 00 00          mov    $0xd,%edx
 8048094:       cd 80                   int    $0x80
 8048096:       ba 00 01 00 00          mov    $0x100,%edx
 804809b:       b9 1b 91 04 08          mov    $0x804911b,%ecx
 80480a0:       bb 00 00 00 00          mov    $0x0,%ebx
 80480a5:       b8 03 00 00 00          mov    $0x3,%eax
 80480aa:       cd 80                   int    $0x80
 80480ac:       be 26 91 04 08          mov    $0x8049126,%esi
 80480b1:       89 f7                   mov    %esi,%edi
 80480b3:       31 db                   xor    %ebx,%ebx
 80480b5:       fc                      cld
 80480b6:       ac                      lods   %ds:(%esi),%al
 80480b7:       34 21                   xor    $0x21,%al
 80480b9:       aa                      stos   %al,%es:(%edi)
 80480ba:       43                      inc    %ebx
 80480bb:       81 fb 07 00 00 00       cmp    $0x7,%ebx
 80480c1:       74 02                   je     0x80480c5
 80480c3:       e2 f1                   loop   0x80480b6
 80480c5:       be 1b 91 04 08          mov    $0x804911b,%esi
 80480ca:       bf 26 91 04 08          mov    $0x8049126,%edi
 80480cf:       b9 07 00 00 00          mov    $0x7,%ecx
 80480d4:       fc                      cld
 80480d5:       f3 a6                   repz cmpsb %es:(%edi),%ds:(%esi)
 80480d7:       75 16                   jne    0x80480ef
 80480d9:       b8 04 00 00 00          mov    $0x4,%eax
 80480de:       bb 01 00 00 00          mov    $0x1,%ebx
 80480e3:       b9 05 91 04 08          mov    $0x8049105,%ecx
 80480e8:       ba 16 00 00 00          mov    $0x16,%edx
 80480ed:       cd 80                   int    $0x80
 80480ef:       b8 01 00 00 00          mov    $0x1,%eax
 80480f4:       cd 80                   int    $0x80
 n3xuxn0 >      
 
 Ok how u can see the first five line is the call of write syscall.
 Then the start of call to read at address  8048096   
 eax->number syscall
 ebx->file descriptor 00->stdin
 ecx->ptr to the buffer(in this case 0x804911b)
 edx-> buffer size
 
 Simple.
 After this call the our password is stored to 0x804911b and start the very simple loop to encrypt the password
 But we can see a very interesting thing:                        

 80480c5:       be 1b 91 04 08  	mov    $0x804911b,%esi
 80480ca:       bf 26 91 04 08          mov    $0x8049126,%edi
 80480cf:       b9 07 00 00 00          mov    $0x7,%ecx
 80480d4:       fc                      cld
 80480d5:       f3 a6                   repz cmpsb %es:(%edi),%ds:(%esi)
 80480d7:       75 16                   jne    0x80480ef
 80480d9:       b8 04 00 00 00          mov    $0x4,%eax
 80480de:       bb 01 00 00 00          mov    $0x1,%ebx
 80480e3:       b9 05 91 04 08          mov    $0x8049105,%ecx
 80480e8:       ba 16 00 00 00          mov    $0x16,%edx
 80480ed:       cd 80                   int    $0x80
 80480ef:       b8 01 00 00 00          mov    $0x1,%eax
 80480f4:       cd 80                   int    $0x80
 
 Esi register contain our manipulated buffer and edi the correct buffer.and ecx contain the number of loops of repz
 at the end of this there is an JNS instrunction which jump to end if the repz cmpsb loop not result true.
 So we can patch this crackme with a simple NOP code at address 80480d7 or use JE.
 
 So open our hex editor(in my case biew) and go to address and patch.
 The result is this:
 
 n3xuxn0 > ./cm1eng

Password : v4mp1r3
Great you did it !:)

 n3xuxn0 >    
 

 Byez
        