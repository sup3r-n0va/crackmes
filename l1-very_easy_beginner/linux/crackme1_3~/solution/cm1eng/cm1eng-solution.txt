Author: belesbsd
crackme: cm1eng

kaptan# objdump -sd cm1eng

cm1eng:     file format elf32-i386-freebsd

Contents of section .text:
 8048080 b8040000 00bb0100 0000b9f8 900408ba  ................
 8048090 0d000000 cd80ba00 010000b9 1b910408  ................
 80480a0 bb000000 00b80300 0000cd80 be269104  .............&..
 80480b0 0889f731 dbfcac34 21aa4381 fb070000  ...1...4!.C.....
 80480c0 007402e2 f1be1b91 0408bf26 910408b9  .t.........&....
 80480d0 07000000 fcf3a675 16b80400 0000bb01  .......u........
 80480e0 000000b9 05910408 ba160000 00cd80b8  ................
 80480f0 01000000 cd80                        ......
Contents of section .data:
 80490f8 0a506173 73776f72 64203a20 00477265  .Password : .Gre
 8049108 61742079 6f752064 69642069 7420213a  at you did it !:
 8049118 290a0a20 20202020 20202020 20005154  )..          .QT
 8049128 42584354 5500                        BXCTU.
Contents of section .comment:
 0000 00546865 204e6574 77696465 20417373  .The Netwide Ass
 0010 656d626c 65722030 2e39382e 333800    embler 0.98.38.
Disassembly of section .text:

08048080 <.text>:

 makes a syscall with no 4 ---> write(1, 0x80490f8, 13);  /* write "Password :" string on stdout */

 8048080:       b8 04 00 00 00          mov    $0x4,%eax
 8048085:       bb 01 00 00 00          mov    $0x1,%ebx
 804808a:       b9 f8 90 04 08          mov    $0x80490f8,%ecx
 804808f:       ba 0d 00 00 00          mov    $0xd,%edx
 8048094:       cd 80                   int    $0x80
 
 makes a syscall with no 3 ---> read(0, 0x804911b, 0x100);  /* get the password from stdin */

 8048096:       ba 00 01 00 00          mov    $0x100,%edx
 804809b:       b9 1b 91 04 08          mov    $0x804911b,%ecx
 80480a0:       bb 00 00 00 00          mov    $0x0,%ebx
 80480a5:       b8 03 00 00 00          mov    $0x3,%eax
 80480aa:       cd 80                   int    $0x80

 Simple encryption faster than DES :), then XOR is used.
 * Take the string at address 0x8049126 ("QTBXCTU" see .data section)
 ** XOR every byte with 0x21 

 80480ac:       be 26 91 04 08          mov    $0x8049126,%esi
 80480b1:       89 f7                   mov    %esi,%edi
 80480b3:       31 db                   xor    %ebx,%ebx
 80480b5:       fc                      cld
 80480b6:       ac                      lods   %ds:(%esi),%al
 80480b7:       34 21                   xor    $0x21,%al
 80480b9:       aa                      stos   %al,%es:(%edi)
 80480ba:       43                      inc    %ebx
 80480bb:       81 fb 07 00 00 00       cmp    $0x7,%ebx
 80480c1:       74 02                   je     0x80480c5
 80480c3:       e2 f1                   loop   0x80480b6

 Compare the XOR of string "QTBXCTU" and the one taken from stdin

 80480c5:       be 1b 91 04 08          mov    $0x804911b,%esi
 80480ca:       bf 26 91 04 08          mov    $0x8049126,%edi
 80480cf:       b9 07 00 00 00          mov    $0x7,%ecx
 80480d4:       fc                      cld
 80480d5:       f3 a6                   repz cmpsb %es:(%edi),%ds:(%esi)  <-- string comparison

 80480d7:       75 16                   jne    0x80480ef  <-- if not equals, exit().
 80480d9:       b8 04 00 00 00          mov    $0x4,%eax         <-- else write (1, "Great you did it !", 0x16);  
 80480de:       bb 01 00 00 00          mov    $0x1,%ebx
 80480e3:       b9 05 91 04 08          mov    $0x8049105,%ecx
 80480e8:       ba 16 00 00 00          mov    $0x16,%edx
 80480ed:       cd 80                   int    $0x80
 80480ef:       b8 01 00 00 00          mov    $0x1,%eax
 80480f4:       cd 80                   int    $0x80
kaptan#

Now let's calculate the key by XOR'ing "QTBXCTU" with 0x21 = 0010 0001 

Q = 51 =  0101 0001
          0010 0001
      XOR _________  = 0111 0000 --->   70  --->  p

T --> 54 XOR 21 --> 75 --> u

B --> 42 XOR 21 --> 63 --> c

...so forth

the password is "pucybut"

kaptan# ./cm1eng

Password : pucybut
Great you did it !:)

kaptan#



 

