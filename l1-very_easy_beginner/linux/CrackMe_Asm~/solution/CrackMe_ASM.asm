

;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2014 Hex-Rays, <support@hex-rays.com>	    		|
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	5EF5EC4C91DCFF23E4A8DBC42A5C32D7
; Input	CRC32 :	93A8F305

; File Name   :	CrackMe_ASM
; Format      :	ELF for	Intel 386 (Executable)
; Imagebase   :	8048000
;
; Source File :	'new.asm'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 8048080h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

		public _start
_start		proc near		; CODE XREF: _start+ADj
		mov	eax, 4
		mov	ebx, 1		; fd
		mov	ecx, offset prom ; addr
		mov	edx, 7		; len
		int	80h		; LINUX	- sys_write
		mov	eax, 3
		mov	ebx, 0		; fd
		mov	ecx, offset var	; addr
		mov	edx, 0Bh	; len
		int	80h		; LINUX	- sys_read
		mov	eax, offset flag
		mov	byte ptr [eax],	53h
		add	eax, 1
		mov	byte ptr [eax],	33h
		add	eax, 1
		mov	byte ptr [eax],	43h
		add	eax, 1
		mov	byte ptr [eax],	72h
		add	eax, 1
		mov	byte ptr [eax],	45h
		add	eax, 1
		mov	byte ptr [eax],	2Bh
		add	eax, 1
		mov	byte ptr [eax],	46h
		add	eax, 1
		mov	byte ptr [eax],	6Ch
		add	eax, 1
		mov	byte ptr [eax],	34h
		add	eax, 1
		mov	byte ptr [eax],	47h
		add	eax, 1
		mov	byte ptr [eax],	21h
		xor	ebx, ebx
		xor	ecx, ecx
		mov	ecx, ds:flag
		mov	ebx, ds:var
		cmp	ecx, ebx
		jnz	short failure
		jmp	short success
; ---------------------------------------------------------------------------
		dw 44E8h
		dd 0B8000000h, 1
		db 0CDh, 80h
; ---------------------------------------------------------------------------

failure:				; CODE XREF: _start+82j
		mov	eax, 4
		mov	ebx, 1		; fd
		mov	ecx, offset fail ; addr
		mov	edx, 1Dh	; len
		int	80h		; LINUX	- sys_write
		call	ClearTerminal
		jmp	_start
; ---------------------------------------------------------------------------

success:				; CODE XREF: _start+84j
		mov	eax, 4
		mov	ebx, 1		; fd
		mov	ecx, offset succ ; addr
		mov	edx, 13h	; len
		int	80h		; LINUX	- sys_write
		mov	eax, 1
		int	80h		; LINUX	- sys_exit
_start		endp


; =============== S U B	R O U T	I N E =======================================


ClearTerminal	proc near		; CODE XREF: _start+A8p
					; ClearTerminal+1Bj
		mov	edx, 1		; len
		mov	ecx, offset Buf	; addr
		mov	ebx, 0		; fd
		mov	eax, 3
		int	80h		; LINUX	- sys_read
		cmp	byte ptr [ecx+edx-1], 0Ah
		jnz	short ClearTerminal
		retn
ClearTerminal	endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 8049170h
prom		db  46h	; F		; DATA XREF: _start+Ao
		db  6Ch	; l
		db  61h	; a
		db  67h	; g
		db  20h
		db  3Ah	; :
		db  20h
succ		db  79h	; y		; DATA XREF: _start+BCo
		db  6Fh	; o
		db  75h	; u
		db  20h
		db  61h	; a
		db  72h	; r
		db  65h	; e
		db  20h
		db  63h	; c
		db  6Fh	; o
		db  72h	; r
		db  72h	; r
		db  65h	; e
		db  63h	; c
		db  74h	; t
		db  20h
		db  21h	; !
		db  0Ah
		db  0Dh
fail		db  79h	; y		; DATA XREF: _start+9Co
		db  6Fh	; o
		db  75h	; u
		db  20h
		db  61h	; a
		db  72h	; r
		db  65h	; e
		db  20h
		db  77h	; w
		db  72h	; r
		db  6Fh	; o
		db  6Eh	; n
		db  67h	; g
		db  20h
		db  2Ch	; ,
		db  20h
		db  74h	; t
		db  72h	; r
		db  79h	; y
		db  20h
		db  61h	; a
		db  67h	; g
		db  61h	; a
		db  69h	; i
		db  6Eh	; n
		db  20h
		db  21h	; !
		db  0Ah
		db  0Dh
buf		db    0
_data		ends

; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	dword public 'BSS' use32
		assume cs:_bss
		;org 80491A8h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
var		dd ?			; DATA XREF: _start+20o _start+7Ar
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
flag		dd ?			; DATA XREF: _start+2Co _start+74r
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
Buf		db    ?	;		; DATA XREF: ClearTerminal+5o
		db    ?	;
_bss		ends

; ===========================================================================

; Segment type:	Absolute symbols
; abs
lp		= 7
ls		= 13h
lf		= 1Dh
		public __bss_start
__bss_start	= 80491A8h
		public _edata
_edata		= 80491A8h
		public _end
_end		= 80491C0h


		end _start
